env:
  es6: true
  react-native/react-native: true
extends:
  - plugin:import/typescript
  - plugin:react-hooks/recommended
globals:
  Atomics: readonly
  SharedArrayBuffer: readonly
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaFeatures:
    jsx: true
  ecmaVersion: 2018
  sourceType: module
  project: './tsconfig.json'
plugins:
  - react
  - import
  - '@typescript-eslint'
  - react-hooks
  - react-native
settings:
  react:
    version: 'detect'
rules:
  no-irregular-whitespace: 'error'
  no-useless-escape: 'error'
  no-shadow: 'off'
  no-restricted-imports:
    [
      'error',
      {
        paths:
          [
            {
              name: '@react-navigation/native',
              importNames: ['useNavigation', 'useRoute'],
              message: 'Please import useNavigation / useRoute from src/lib/hooks instead.',
            },
          ],
      },
    ]

  react/no-set-state: 'error'
  react/no-array-index-key: 'warn'
  react/no-danger-with-children: 'error'
  react/no-deprecated: 'warn'
  react/no-redundant-should-component-update: 'error'
  react/no-string-refs: 'error'
  react/no-unescaped-entities: 'warn'
  react/prefer-stateless-function: 'warn'
  react/self-closing-comp: ['error', { component: true, html: true }]
  react/jsx-boolean-value: ['error', 'never']
  react/jsx-curly-brace-presence: ['error', 'never']
  react/jsx-fragments: 'warn'
  react/jsx-key: 'error'
  react/jsx-no-useless-fragment: 'warn'
  react/jsx-pascal-case: 'error'
  react/jsx-sort-props: ['error', { shorthandFirst: true, callbacksLast: true }]

  '@typescript-eslint/adjacent-overload-signatures': 'error'
  '@typescript-eslint/array-type': ['error', { default:"array-simple" }]
  '@typescript-eslint/ban-ts-comment': 'error'
  '@typescript-eslint/ban-types': ['error', { 'types': { object: false } }]
  '@typescript-eslint/member-ordering': 'warn'
  '@typescript-eslint/no-empty-interface': 'error'
  '@typescript-eslint/no-explicit-any': 'warn'
  '@typescript-eslint/no-extra-non-null-assertion': 'error'
  '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true }]
  '@typescript-eslint/no-for-in-array': 'error'
  '@typescript-eslint/no-misused-new': 'error'
  '@typescript-eslint/no-misused-promises': 'error'
  '@typescript-eslint/no-non-null-asserted-optional-chain': 'warn'
  '@typescript-eslint/no-require-imports': 'error'
  '@typescript-eslint/no-throw-literal': 'error'
  '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error'
  '@typescript-eslint/no-unnecessary-type-arguments': 'error'
  '@typescript-eslint/prefer-as-const': 'error'
  '@typescript-eslint/prefer-includes': 'error'
  '@typescript-eslint/no-extraneous-class': 'error'
  '@typescript-eslint/no-this-alias': 'error'
  '@typescript-eslint/prefer-optional-chain': 'error'
  '@typescript-eslint/prefer-regexp-exec': 'error'
  '@typescript-eslint/prefer-string-starts-ends-with': 'error'
  '@typescript-eslint/promise-function-async': 'error'
  '@typescript-eslint/switch-exhaustiveness-check': 'error'
  '@typescript-eslint/restrict-plus-operands': 'error'

  react-hooks/exhaustive-deps: 'off'

  import/no-useless-path-segments: 'error'
  import/no-unused-modules: 'error'
  import/order:
    [
      'error',
      {
        alphabetize: { order: 'asc' },
        'newlines-between': 'always',
        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'unknown'],
        pathGroups: [{ pattern: '~/**', group: 'internal' }, { pattern: './**', group: 'sibling' }],
      },
    ]

  react-native/no-unused-styles: 'error'
  react-native/split-platform-components: 'warn'
  react-native/no-inline-styles: 'warn'
  react-native/no-color-literals: 'error'
  react-native/no-single-element-style-arrays: 'error'
